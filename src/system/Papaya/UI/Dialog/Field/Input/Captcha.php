<?php
/**
 * papaya CMS
 *
 * @copyright 2000-2018 by papayaCMS project - All rights reserved.
 * @link http://www.papaya-cms.com/
 * @license http://www.gnu.org/licenses/old-licenses/gpl-2.0.html GNU General Public License, version 2
 *
 *  You can redistribute and/or modify this script under the terms of the GNU General Public
 *  License (GPL) version 2, provided that the copyright and license notes, including these
 *  lines, remain unmodified. papaya is distributed in the hope that it will be useful, but
 *  WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 *  FOR A PARTICULAR PURPOSE.
 */

namespace Papaya\UI\Dialog\Field\Input;
/**
 * An image captcha input field
 *
 * @package Papaya-Library
 * @subpackage UI
 */
class Captcha extends \Papaya\UI\Dialog\Field\Input {

  /**
   * Field type, used in template
   *
   * @var string
   */
  protected $_type = 'captcha';

  /**
   * String name/idnetifier of the dynamic image
   *
   * @var string
   */
  private $_captchaImage = '';

  /**
   * Buffer for the captcha status
   *
   * @var boolean|NULL
   */
  private $_isCaptchaValid = NULL;

  /**
   * Creates dialog field for
   *
   * @param string $caption
   * @param string $name
   * @param string $captchaImage
   * @internal param string $dynamicImage dynamic image identifier
   */
  public function __construct($caption, $name, $captchaImage = 'captcha') {
    parent::__construct($caption, $name, 1024, NULL);
    $this->setMandatory(TRUE);
    \Papaya\Utility\Constraints::assertNotEmpty($captchaImage);
    $this->_captchaImage = $captchaImage;
    $this->setFilter(new \Papaya\Filter\Equals(TRUE));
  }

  /**
   * Getter for the dynamic image - captcha image generator identifer
   *
   * @return string
   */
  public function getCaptchaImage() {
    return $this->_captchaImage;
  }

  /**
   * Append the captcha field xml to the dom
   *
   * @param \Papaya\Xml\Element $parent
   * @return \Papaya\Xml\Element
   */
  public function appendTo(\Papaya\Xml\Element $parent) {
    $field = $this->_appendFieldTo($parent);
    $identifier = $this->createCaptchaIdentifier();
    $field->appendElement(
      'input',
      array(
        'type' => $this->getType(),
        'name' => $this->_getParameterName($this->getName().'['.$identifier.']', TRUE),
      )
    );
    $reference = new \Papaya\UI\Reference(clone $this->papaya()->request->getUrl());
    $reference->setRelative($this->_captchaImage.'.image.jpg');
    $reference->setParameters(array('img' => array('identifier' => $identifier)));
    $field->appendElement('image', array('src' => $reference->getRelative()));
    return $field;
  }

  /**
   * Fetch the current value
   *
   * @return boolean
   */
  public function getCurrentValue() {
    if ($this->hasCollection() &&
      $this->collection()->hasOwner()) {
      return $this->validateCaptcha();
    }
    return TRUE;
  }

  /**
   * Validate the captcha agains the request parameter value (user input), invalidate
   * the captcha if it matches. Store the value in an internal member variable, because
   * of the invalidation, the validation can not be repeated.
   *
   * @return boolean
   */
  private function validateCaptcha() {
    if (NULL === $this->_isCaptchaValid) {
      $token = $this->collection()->owner()->parameters()->get(
        $this->getName(), array()
      );
      if (!empty($token)) {
        $value = reset($token);
        $identifier = key($token);
        $captchas = $this->papaya()->session->getValue('PAPAYA_SESS_CAPTCHA', []);
        if (isset($captchas[$identifier]) && ($captchas[$identifier] == $value)) {
          unset($captchas[$identifier]);
          $this->papaya()->session->setValue('PAPAYA_SESS_CAPTCHA', $captchas);
          return $this->_isCaptchaValid = TRUE;
        }
      }
      return $this->_isCaptchaValid = FALSE;
    }
    return $this->_isCaptchaValid;
  }

  /**
   * Create a random identifer to use as an name for the actual captcha value generated by the
   * dynamic image module.
   *
   * @return string
   */
  public function createCaptchaIdentifier() {
    return md5(\Papaya\Utility\Random::getId());
  }
}
