<?php
/**
 * papaya CMS
 *
 * @copyright 2000-2018 by papayaCMS project - All rights reserved.
 * @link http://www.papaya-cms.com/
 * @license http://www.gnu.org/licenses/old-licenses/gpl-2.0.html GNU General Public License, version 2
 *
 *  You can redistribute and/or modify this script under the terms of the GNU General Public
 *  License (GPL) version 2, provided that the copyright and license notes, including these
 *  lines, remain unmodified. papaya is distributed in the hope that it will be useful, but
 *  WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 *  FOR A PARTICULAR PURPOSE.
 */

/**
* Papaya Database Access Record, a single row database result
*
* A list of fields is used to provide access to the values using array or property syntax.
*
* @package Papaya-Library
* @subpackage Database
*/
abstract class PapayaDatabaseObjectRecord
  extends PapayaDatabaseObject
  implements PapayaDatabaseInterfaceRecord {

  /**
  * field name mapping (dynamic properties)
  * @var array(string $property => string $field)
  */
  protected $_fields = array();

  /**
  * field values
  * @var array
  */
  protected $_values = array();

  /**
  * Table name for default load/save methods.
  *
  *  This property is only needed for the default implementations, not if you override the
  *  load/save methods.
  *
  * @var string|NULL
  */
  protected $_tableName = NULL;

  /**
   * Loads the values from the database table.
   *
   * This has not need to be a real record.
   *
   * @param mixed $filter
   * @return bool
   */
  public function load($filter) {
    return $this->_loadRecordFromTable(
      $this->databaseGetTableName($this->_tableName), 'id', $filter
    );
  }

  /**
  * Store record into database
  *
  * @return boolean|integer
  */
  public function save() {
    return $this->_saveRecordWithAutoId();
  }

  /**
  * Delete the currently loaded record.
  *
  * @return boolean
  */
  public function delete() {
    return $this->_deleteRecord(
      $this->databaseGetTableName($this->_tableName), array('id')
    );
  }

  /**
   * Saves a record with an autogenerated id (generated from database server).
   *
   * @param null $convertValuesCallback
   * @return integer|string|FALSE
   */
  protected function _saveRecordWithAutoId($convertValuesCallback = NULL) {
    $table = $this->databaseGetTableName($this->_tableName);
    if (empty($this->id)) {
      return $this->_insertRecord($table, 'id', $convertValuesCallback);
    } else {
      return $this->_updateRecord(
        $table, array($this->_fields['id'] => $this->id), $convertValuesCallback
      );
    }
  }

  /**
   * Saves a record with an manual id (set before save).
   *
   * @param callable $convertValuesCallback
   * @return boolean
   */
  protected function _saveRecordWithDefinedId($convertValuesCallback = NULL) {
    if (!empty($this->_values['id'])) {
      $table = $this->databaseGetTableName($this->_tableName);
      $idField = $this->_fields['id'];
      $sql = "SELECT COUNT(*) FROM %s WHERE $idField = '%s'";
      $parameters = array(
        $table,
        $this->_values['id']
      );
      if ($res = $this->databaseQueryFmt($sql, $parameters)) {
        if ($res->fetchField() > 0) {
          return $this->_updateRecord(
            $table,
            array($idField => $this->_values['id']),
            $convertValuesCallback
          );
        } elseif ($this->_insertRecord($table, NULL, $convertValuesCallback)) {
          return $this->_values['id'];
        }
      }
    }
    return FALSE;
  }

  /**
  * Delete the currently loaded record using a given list of properties that identify the table.
  *
  * @param string $tableName
  * @param array $properties
  * @return boolean
  */
  protected function _deleteRecord($tableName, array $properties) {
    $filter = array();
    foreach ($properties as $property) {
      if (!empty($this->_fields[$property]) &&
          isset($this->$property)) {
        $filter[$this->_fields[$property]] = $this->$property;
      }
    }
    if (!empty($filter)) {
      return FALSE !== $this->databaseDeleteRecord($tableName, $filter);
    }
    return FALSE;
  }

  /**
  * Assigns all elements of an array (or an object implementing ArrayAccess) with the same names
  * to the current object.
  *
  * Be aware that it uses the normalized names.
  *
  * @param object|array $source
  */
  public function assign($source) {
    if (is_array($source) ||
        $source instanceof ArrayAccess) {
      foreach ($this->_fields as $field => $mapping) {
        if (isset($source[$field])) {
          $this->_values[$field] = $source[$field];
        }
      }
    }
  }

  /**
  * Returns the current element data array.
  *
  * Be aware that it uses the normalized names.
  *
  * @return array $source
  */
  public function toArray() {
    $result = array();
    foreach ($this->_fields as $field => $mapping) {
      if (isset($this->_values[$field])) {
        $result[$field] = $this->_values[$field];
      } else {
        $result[$field] = NULL;
      }
    }
    return $result;
  }

  /**
  * Return Iterator for record values
  *
  * @return ArrayIterator
  */
  public function getIterator() {
    return new ArrayIterator($this->toArray());
  }

  /**
  * Check if a field exists using array syntax
  *
  * This will return TRUE even if the field has no value.
  *
  * @param string $offset
  * @return boolean
  */
  public function offsetExists($offset) {
    $offset = PapayaUtilStringIdentifier::toUnderscoreLower($offset);
    return array_key_exists($offset, $this->_fields);
  }

  /**
  * Return field value using array syntax - or NULL
  *
  * @throws OutOfBoundsException
  * @param string $offset
  * @return string|NULL
  */
  public function offsetGet($offset) {
    $offset = PapayaUtilStringIdentifier::toUnderscoreLower($offset);
    if (isset($this->_values[$offset])) {
      return $this->_values[$offset];
    } elseif ($this->offsetExists($offset)) {
      return NULL;
    }
    throw new OutOfBoundsException(
      sprintf('Invalid field name "%s" in "%s"', $offset, get_class($this))
    );
  }

  /**
   * Set field value using array syntax
   *
   * @param string $offset
   * @param mixed $value
   * @throws OutOfBoundsException
   */
  public function offsetSet($offset, $value) {
    $offset = PapayaUtilStringIdentifier::toUnderscoreLower($offset);
    if ($this->offsetExists($offset)) {
      $this->_values[$offset] = $value;
    } else {
      throw new OutOfBoundsException(
        sprintf('Invalid field name "%s" in "%s".', $offset, get_class($this))
      );
    }
  }

  /**
  * Unset field value using array syntax
  * @param string $offset
  * @return void
  */
  public function offsetUnset($offset) {
    $offset = PapayaUtilStringIdentifier::toUnderscoreLower($offset);
    if (isset($this->_values[$offset])) {
      unset($this->_values[$offset]);
    }
  }

  /**
   * Check if a field exists using property syntax
   *
   * This will return FALSE if the field is set to NULL
   *
   * @param string $name
   * @return boolean
   */
  public function __isset($name) {
    $name = PapayaUtilStringIdentifier::toUnderscoreLower($name);
    return isset($this->_values[$name]);
  }

  /**
  * Get field value using property syntax
  *
  * @throws OutOfBoundsException
  * @param string $name
  * @return string|NULL
  */
  public function __get($name) {
    $name = PapayaUtilStringIdentifier::toUnderscoreLower($name);
    return $this->offsetGet($name);
  }

  /**
  * Set field value using property syntax
  *
  * @param string $name
  * @param mixed $value
  * @return void
  */
  public function __set($name, $value) {
    $name = PapayaUtilStringIdentifier::toUnderscoreLower($name);
    $this->offsetSet($name, $value);
  }

  /**
  * Unset field value using array syntax
  * @param string $name
  * @return void
  */
  public function __unset($name) {
    $name = PapayaUtilStringIdentifier::toUnderscoreLower($name);
    $this->offsetUnset($name);
  }

  /**
  * Use the fields definition to load the record from the table. This works only if you provide
  * database column names for all fields.
  *
  * @param string $table
  * @param string $identifier identifier field (not database column)
  * @param mixed $value identifer value
  * @param Callback|Closure $convertRecordCallback
  * @return boolean
  */
  protected function _loadRecordFromTable(
    $table, $identifier, $value, $convertRecordCallback = NULL
  ) {
    $fieldNames = array();
    foreach ($this->_fields as $fieldName) {
      if (!empty($fieldName)) {
        $fieldNames[] = $fieldName;
      }
    }
    $sql = "SELECT ".implode(', ', $fieldNames).
             " FROM %s WHERE ".$this->_fields[$identifier]."= '%s'";
    $parameters = array($table, $value);
    return $this->_loadRecord($sql, $parameters, $convertRecordCallback);
  }

  /**
  * Load a single record from database using an sql and a parameters array
  *
  * @param string $sql
  * @param array $parameters
  * @param Callback|Closure $convertRecordCallback A callback to convert the record to values
  *   The default value is array($this, 'convertRecordToValues').
  * @return bool
  */
  protected function _loadRecord($sql, array $parameters, $convertRecordCallback = NULL) {
    if ($res = $this->databaseQueryFmt($sql, $parameters)) {
      if ($row = $res->fetchRow(PapayaDatabaseResult::FETCH_ASSOC)) {
        $this->_values = $this->_applyCallback(
          $convertRecordCallback, array($this, 'convertRecordToValues'), $row
        );
        return TRUE;
      }
    }
    return FALSE;
  }

  /**
  * Insert the record into the database using the fields definition.
  *
  * @param string $table
  * @param string $identifier
  * @param Callback|Closure $convertValuesCallback
  * @return boolean|Integer
  */
  protected function _insertRecord($table, $identifier = NULL, $convertValuesCallback = NULL) {
    $record = $this->_applyCallback(
      $convertValuesCallback, array($this, 'convertValuesToRecord'), $this->_values
    );
    if (isset($identifier)) {
      $identifierField = $this->_fields[$identifier];
      if (isset($record[$identifierField])) {
        unset($record[$identifierField]);
      }
    } else {
      $identifierField = NULL;
    }
    if ($newId = $this->databaseInsertRecord($table, $identifierField, $record)) {
      if (isset($identifierField)) {
        return $this->_values[$identifier] = $newId;
      }
      return TRUE;
    }
    return FALSE;
  }

  /**
   * Update the record in the database using the fields definition.
   *
   * @param string $table
   * @param array $filter
   * @param Callback|Closure $convertValuesCallback
   * @return bool
   */
  protected function _updateRecord($table, array $filter, $convertValuesCallback = NULL) {
    $record = $this->_applyCallback(
      $convertValuesCallback, array($this, 'convertValuesToRecord'), $this->_values
    );
    return FALSE !== $this->databaseUpdateRecord(
      $table, $record, $filter
    );
  }

  /**
  * Apply one of two callbacks to data.
  *
  * If the first argument is NULL the second is used. The method is to apply a individual callback
  * if availiable and use a fallback callback if nessessary.
  *
  * @throws UnexpectedValueException
  * @param Callback|Closure $actual
  * @param Callback|Closure $default
  * @param array $data
  * @return array
  */
  protected function _applyCallback($actual, $default, array $data) {
    $callback = is_null($actual) ? $default : $actual;
    if (isset($callback) && is_callable($callback)) {
      return call_user_func($callback, $data);
    } else {
      throw new UnexpectedValueException(
        'Invalid callback provided.'
      );
    }
  }

  /**
  * Converts the record from database into a values array using the mapping array.
  *
  * @param array $record
  * @return array
  */
  public function convertRecordToValues(array $record) {
    $result = array();
    $mapping = array_flip($this->_fields);
    foreach ($record as $field => $data) {
      if (!empty($mapping[$field])) {
        $result[$mapping[$field]] = $data;
      }
    }
    return $result;
  }

  /**
  * Converts the values into a database record using the mapping array.
  *
  * @param array $values
  * @return array
  */
  public function convertValuesToRecord(array $values) {
    $result = array();
    foreach ($values as $field => $data) {
      if (!empty($this->_fields[$field])) {
        $result[$this->_fields[$field]] = $data;
      }
    }
    return $result;
  }
}
